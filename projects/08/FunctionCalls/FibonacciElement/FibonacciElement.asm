@THIS
M=-1
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
(Main.fibonacci.LOOP_INIT_LCL)
   @Main.fibonacci.DONE_INIT_LCL
   D;JEQ
   @SP
   A=M
   M=0
   @SP
   M=M+1
   D=D-1
@Main.fibonacci.LOOP_INIT_LCL
0;JMP
(Main.fibonacci.DONE_INIT_LCL)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
@IF_0
D;JLT
@SP
A=M-1
M=0
@END_0
0;JMP
(IF_0)
@SP
A=M-1
M=-1
(END_0)
// if-goto IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@IF_TRUE
D;JGT
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=A
@FRAME
M=D
@5
D=A
@FRAME
A=M
A=M-D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@1
D=A
@FRAME
A=M
A=M-D
D=M
@THAT
M=D
@2
D=A
@FRAME
A=M
A=M-D
D=M
@THIS
M=D
@3
D=A
@FRAME
A=M
A=M-D
D=M
@ARG
M=D
@4
D=A
@FRAME
A=M
A=M-D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
M=-M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci.RET.2TRoqONarpxZEGlPDmL2YevoDEC91W0pJOOueBZQWTAlriEUU7GUEr2AXxhxgfVs
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.RET.2TRoqONarpxZEGlPDmL2YevoDEC91W0pJOOueBZQWTAlriEUU7GUEr2AXxhxgfVs)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
M=-M
D=M
@SP
M=M-1
@SP
A=M
M=D+M
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci.RET.CrGWs41spOcLKcXb7rkM3HVGGE2LRlNCvq0RWRrUOC4GclgbvyY6hQ16mtEgrLXH
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.RET.CrGWs41spOcLKcXb7rkM3HVGGE2LRlNCvq0RWRrUOC4GclgbvyY6hQ16mtEgrLXH)
// add
@SP
M=M-1
@SP
A=M
D=M
@SP
M=M-1
@SP
A=M
M=M+D
@SP
M=M+1
// return
@LCL
D=A
@FRAME
M=D
@5
D=A
@FRAME
A=M
A=M-D
D=M
@RET
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@1
D=A
@FRAME
A=M
A=M-D
D=M
@THAT
M=D
@2
D=A
@FRAME
A=M
A=M-D
D=M
@THIS
M=D
@3
D=A
@FRAME
A=M
A=M-D
D=M
@ARG
M=D
@4
D=A
@FRAME
A=M
A=M-D
D=M
@LCL
M=D
@RET
A=M
0;JMP
@THIS
M=-1
// function Sys.init 0
(Sys.init)
@0
D=A
(Sys.init.LOOP_INIT_LCL)
   @Sys.init.DONE_INIT_LCL
   D;JEQ
   @SP
   A=M
   M=0
   @SP
   M=M+1
   D=D-1
@Sys.init.LOOP_INIT_LCL
0;JMP
(Sys.init.DONE_INIT_LCL)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Main.fibonacci.RET.Wyax1lLyGi0ozc7BEndSk9uai14EWAFKYnEd2VV8jw2X8VUyB12xt5cWENeaBHc3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.RET.Wyax1lLyGi0ozc7BEndSk9uai14EWAFKYnEd2VV8jw2X8VUyB12xt5cWENeaBHc3)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
