import sys
import unittest
from unittest import mock
from more_itertools import peekable
from lib.jack_token import Keyword, Symbol, Identifier, IntegerConstant, StringConstant
from lib.compilation_engine import CompilationEngine


class TestCompilationEngine(unittest.TestCase):
    def test_compile_statements(self):
        mock_tokens = peekable(
            iter(
                [
                    Keyword("if"),
                    Symbol("("),
                    Identifier("x"),
                    Symbol("<"),
                    IntegerConstant("153"),
                    Symbol(")"),
                    Symbol("{"),
                    Keyword("let"),
                    Identifier("city"),
                    Symbol("="),
                    StringConstant("Paris"),
                    Symbol(";"),
                    Symbol("}"),
                ]
            )
        )
        mock_output_file = mock.Mock()
        CompilationEngine.compile_statements(mock_tokens, mock_output_file)
        mock_output_file.assert_has_calls(
            [
                mock.call.write(Keyword("if").to_xml(1)),
                mock.call.write("\n"),
                mock.call.write(Symbol("(").to_xml(1)),
                mock.call.write("\n"),
                mock.call.write(Identifier("x").to_xml(3)),
                mock.call.write("\n"),
                mock.call.write(Symbol("<").to_xml(2)),
                mock.call.write("\n"),
                mock.call.write(IntegerConstant("153").to_xml(3)),
                mock.call.write("\n"),
                mock.call.write(Symbol(")").to_xml(1)),
                mock.call.write("\n"),
                mock.call.write(Symbol("{").to_xml(1)),
                mock.call.write("\n"),
                mock.call.write(Keyword("let").to_xml(2)),
                mock.call.write("\n"),
                mock.call.write(Identifier("city").to_xml(2)),
                mock.call.write("\n"),
                mock.call.write(Symbol("=").to_xml(2)),
                mock.call.write("\n"),
                mock.call.write(StringConstant("Paris").to_xml(4)),
                mock.call.write("\n"),
                mock.call.write(Symbol(";").to_xml(2)),
                mock.call.write("\n"),
                mock.call.write(Symbol("}").to_xml(1)),
                mock.call.write("\n"),
            ]
        )

    def test_compile_class(self):
        mock_tokens = peekable(
            iter(
                [
                    Keyword("class"),
                    Identifier("Main"),
                    Symbol("{"),
                    Keyword("static"),
                    Keyword("boolean"),
                    Identifier("test"),
                    Symbol(";"),
                    Keyword("function"),
                    Keyword("void"),
                    Identifier("main"),
                    Symbol("("),
                    Symbol(")"),
                    Symbol("{"),
                    Keyword("var"),
                    Identifier("SquareGame"),
                    Identifier("game"),
                    Symbol(";"),
                    Keyword("let"),
                    Identifier("game"),
                    Symbol("="),
                    Identifier("SquareGame"),
                    Symbol("."),
                    Identifier("new"),
                    Symbol("("),
                    Symbol(")"),
                    Symbol(";"),
                    Keyword("do"),
                    Identifier("game"),
                    Symbol("."),
                    Identifier("run"),
                    Symbol("("),
                    Symbol(")"),
                    Symbol(";"),
                    Keyword("do"),
                    Identifier("game"),
                    Symbol("."),
                    Identifier("dispose"),
                    Symbol("("),
                    Symbol(")"),
                    Symbol(";"),
                    Keyword("return"),
                    Symbol(";"),
                    Symbol("}"),
                    Keyword("function"),
                    Keyword("void"),
                    Identifier("test"),
                    Symbol("("),
                    Symbol(")"),
                    Symbol("{"),
                    Keyword("var"),
                    Keyword("int"),
                    Identifier("i"),
                    Symbol(","),
                    Identifier("j"),
                    Symbol(";"),
                    Keyword("var"),
                    Identifier("String"),
                    Identifier("s"),
                    Symbol(";"),
                    Keyword("var"),
                    Identifier("Array"),
                    Identifier("a"),
                    Symbol(";"),
                    Keyword("if"),
                    Symbol("("),
                    Keyword("false"),
                    Symbol(")"),
                    Symbol("{"),
                    Keyword("let"),
                    Identifier("s"),
                    Symbol("="),
                    StringConstant("string constant"),
                    Symbol(";"),
                    Keyword("let"),
                    Identifier("s"),
                    Symbol("="),
                    Keyword("null"),
                    Symbol(";"),
                    Keyword("let"),
                    Identifier("a"),
                    Symbol("["),
                    IntegerConstant("1"),
                    Symbol("]"),
                    Symbol("="),
                    Identifier("a"),
                    Symbol("["),
                    IntegerConstant("2"),
                    Symbol("]"),
                    Symbol(";"),
                    Symbol("}"),
                    Keyword("else"),
                    Symbol("{"),
                    Keyword("let"),
                    Identifier("i"),
                    Symbol("="),
                    Identifier("i"),
                    Symbol("*"),
                    Symbol("("),
                    Symbol("-"),
                    Identifier("j"),
                    Symbol(")"),
                    Symbol(";"),
                    Keyword("let"),
                    Identifier("j"),
                    Symbol("="),
                    Identifier("j"),
                    Symbol("/"),
                    Symbol("("),
                    Symbol("-"),
                    IntegerConstant("2"),
                    Symbol(")"),
                    Symbol(";"),
                    Keyword("let"),
                    Identifier("i"),
                    Symbol("="),
                    Identifier("i"),
                    Symbol("|"),
                    Identifier("j"),
                    Symbol(";"),
                    Symbol("}"),
                    Keyword("return"),
                    Symbol(";"),
                    Symbol("}"),
                    Symbol("}"),
                ]
            )
        )

        mock_output_file = mock.Mock()
        CompilationEngine.compile_class(mock_tokens, sys.stdout)
        # mock_output_file.assert_has_calls(
        #     [
        #         mock.call.write(Keyword("class").to_xml(1)),
        #         mock.call.write("\n"),
        #         mock.call.write(Identifier("Main").to_xml(3)),
        #         mock.call.write("\n"),
        #         mock.call.write(Symbol("{").to_xml(2)),
        #         mock.call.write("\n"),
        #         mock.call.write(Keyword("static").to_xml(1)),
        #         mock.call.write("\n"),
        #         mock.call.write(StringConstant("Paris").to_xml(4)),
        #     ]
        # )

        self.assertFalse(True)
