// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAinst);
    Mux16(a=aluOut, b=instruction, sel=isAinst, out=newA);
    Mux(a=instruction[5] /*d1*/, b=true, sel=isAinst, out=shouldLoadA);
    Register(in=newA, load=shouldLoadA, out=A);

    DRegister(in=aluOut, load=instruction[4] /*d2*/, out=D);
    Mux16(a=A, b=inM, sel=instruction[12] /*a*/, out=aOrM);
    ALU(x=D, y=aOrM, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    // Jump logic
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=JGT);
    Mux(a=false/*no jump*/, b=JGT, sel=instruction[0] /*j3*/, out=x);
    Mux(a=zr/*JEQ*/, b=notNg /*JGE*/, sel=instruction[0] /*j3*/, out=y);
    Mux(a=ng/*JLT*/, b=notZr/*JNE*/, sel=instruction[0]/*j3*/, out=z);
    Or(a=ng, b=zr, out=JLE);
    Mux(a=JLE, b=true, sel=instruction[0]/*j3*/, out=u);
    Mux(a=x, b=y, sel=instruction[1]/*j2*/, out=v);
    Mux(a=z, b=u, sel=instruction[1]/*j2*/, out=w);
    Mux(a=v, b=w, sel=instruction[0]/*j1*/, out=shouldLoadPc);
    
    PC(in=A, load=shouldLoadPc, inc=true, reset=reset, out[0..14]=pc);

    And(a=instruction[3]/*d3*/, b=instruction[15]/*C-instruction*/, out=writeM);
}